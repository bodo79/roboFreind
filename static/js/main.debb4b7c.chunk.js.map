{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPendig","filterRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.debb4b7c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h4>{name}</h4>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\n//Samesame\n\n// const Card = (props) => {\n// \tconst { name, email, id } = props;\n// \treturn (\n// \t\t<div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\n// \t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n// \t\t\t<div>\n// \t\t\t\t<h2>{name}</h2>\n// \t\t\t\t<p>{email}</p>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\n\n//Samesame\n\n// const Card = (props) => {\n\n// \treturn (\n// \t\t<div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\n// \t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?size=200x200`}/>\n// \t\t\t<div>\n// \t\t\t\t<h2>{props.name}</h2>\n// \t\t\t\t<p>{props.email}</p>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t  \t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\tusername={robots[i].username} \n\t\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\t\t\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search your robot' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n\t\t\t{ props.children }\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport { connect} from 'react-redux'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\nimport { setSearchField, requestRobots} from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\tisPendig: state.requestRobots.isPendig,\n\t\trobots: state.requestRobots.robots,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\n\t}\t\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst  { searchField, onSearchChange, robots, isPendig }  = this.props;\n\t\tconst filterRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn isPendig ? \n\t\t<h1 className='tc'> LOADING... </h1> :\n\t\t(\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className='f2'>RoboFreinds</h1>\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList robots={filterRobots}/>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\t\t\n\t\n\t}\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);//connect is higher order function","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD, //it's constunt this why is CAPS\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=> response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n//Promise have 3 states\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\n// searchRobots Reducer\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField:action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPendig: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch (action.type) {\n\t\tcase \tREQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPendig: true});\n\t\tcase \tREQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPendig: false});\n\t\tcase \tREQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPendig: false});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger)) // usally you use root reducer\n\nReactDOM.render(\n\t\t\t\t<Provider  store={store}>\n\t\t\t\t\t<App/>\n\t\t\t\t</Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}